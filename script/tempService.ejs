'use strict';

const <%=table%>Module = require(rootPath.concat("/module/<%=table%>Module.js"));
const logger = log4js.getLogger('system');

//查询数据并分页
exports.select = Promise.coroutine(function* (req,res) {
    let conn,data;
    try {
        conn = yield util.getConnect();

        data = { };

        Object.assign(data, req.query);

        const result = yield Promise.all([ <%=table%>Module.select(conn, data), <%=table%>Module.count(conn, data) ]);

        const obj = {
          totalCount: result[1],
          limitCount: req.query.pagecount || config.pagecount,
          currentPage: req.query.page || 1,
        };

        result[1] = obj;

        return res.json(util.success({ data: result }));

        let result = yield <%=table%>Module.select(conn,req.query);


        return res.json(util.success( {data:result} ));


    } catch (error) {
        logger.error(error.stack);
        return res.json(config.message.error);
    } finally {
        conn.release();
    }
});

//获取具体记录
exports.get = Promise.coroutine(function* (req,res) {
    let conn;
    try {
        conn = yield util.getConnect();

        let <%=table%> = yield <%=table%>Module.get(conn,req.params);
        return res.json(util.success( {data:<%=table%>} ));

    } catch (error) {
        logger.error(error.stack);
        return res.json(config.message.error);
    } finally {
        conn.release();
    }
});

exports.add = Promise.coroutine(function* (req,res) {
    let conn,data;
    try {
        conn = yield util.getConnect();

        req.checkParams('a', 'is not Empty').notEmpty();
        req.checkQuery('b', 'is not Empty').notEmpty();
        req.checkBody('c', 'is not Empty').notEmpty();

        const errors = req.validationErrors();
        if (errors) {
          logger.warn(errors);
          return res.json(util.fail({ data: errors }));
        }

        data = {
          a:req.params.a,
          b:req.query.b,
          c:req.body.c
        }

        const id = yield <%=table%>Module.add(conn,data);

        return res.json(util.success({data:{id:id}}));

    } catch (error) {
        logger.error(error.stack);
        return res.json(config.message.error);
    } finally {
        conn.release();
    }
});

//更新
exports.update = Promise.coroutine(function* (req,res) {
    let conn;
    try {
        conn = yield util.getConnect();

        yield <%=table%>Module.update(conn,req.body,req.params);
        return res.json(config.message.success);

    } catch (error) {
        logger.error(error.stack);
        return res.json(config.message.error);
    } finally {
        conn.release();
    }
});

exports.delete = Promise.coroutine(function* (req,res) {
    let conn;
    try {
        conn = yield util.getConnect();
        yield <%=table%>Module.delete(conn,req.params);
        return res.json(config.message.success);
    } catch (error) {
        logger.error(error.stack);
        return res.json(config.message.error);
    } finally {
        conn.release();
    }
});
