<!--
@Author: yingzhou xu
@Date:   2017-04-14T09:53:10+08:00
@Email:  dyyz1993@qq.com
@Filename: tempModule.ejs
@Last modified by:   yingzhou xu
@Last modified time: 2017-05-11T18:00:28+08:00
-->



'use strict';

const mono = require(rootPath.concat("/module/monologue.js"));
const logger = log4js.getLogger('mysql');
const pool = util.pool;

function querySql(sql, arr = []){
  // logger.info(sql);
  return pool.queryAsync(sql, arr).catch(e => {
    logger.error(sql);
    throw e;
  });
}


// 回滚次数
exports.transaction = co(function* (sqls){
  let conn ;
  try{
    conn = yield pool.getConnectionAsync();
    yield conn.beginTransactionAsync();
    for(const sql of sqls){
      yield query( sql);
    }
    yield conn.commitAsync();
    return true;
  }catch(e){
    logger.error(`【异常】回滚`, e);
    yield conn.rollbackAsync();
    return false;
  }finally{
    conn && conn.release();
  }
});




exports.select= ( param ) => {
    param.page = param.page || 1;
    param.pagecount = param.pagecount || config.pagecount;

    let sql = mono().select('*','<%=table %>')
    .limit(param.pagecount,(param.page - 1) * param.pagecount)
    .query().sql;
    return querySql(sql)
    .catch((err) => {
      logger.error(sql);
      throw err;
    });
}

exports.count= ( param ) => {
    let sql = mono().select('count(*) count','<%=table %>').query().sql;
    return querySql(sql)
    .then((result)=>{
      return result.length>0?result[0].count:0;
    })
    .catch((err) => {
      logger.error(sql);
      throw err;
    });
}

exports.get = ( param ) => {
    let sql = mono().select('*','<%=table %>').where({<%=PK%>:param.id}).query().sql;
    return querySql(sql)
    .then((result)=>{
      return result[0];
    })
    .catch((err) => {
      logger.error(sql);
      throw err;
    });
}

exports.add = ( param ) => {
    let sql = mono().insert('<%=table %>',param).query().sql;
    return querySql(sql)
    .then((result)=>{
      return result.insertId;
    })
    .catch((err) => {
      logger.error(sql);
      throw err;
    });
}

exports.update = ( data,param ) => {
    let sql = mono().update('<%=table %>',data).where({<%=PK%>:param.id}).query().sql;
    return querySql(sql)
    .catch((err) => {
      logger.error(sql);
      throw err;
    });
}

exports.delete = ( param ) => {
    let sql = mono().delete('<%=table %>').where({<%=PK%>:param.id}).query().sql;
    return querySql(sql)
    .then((result) => {
        return result.affectedRows;
    })
    .catch((err) => {
      logger.error(sql);
      throw err;
    });
}
